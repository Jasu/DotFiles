snippet po "" b
#pragma once
$0
endsnippet

snippet ib "" b
#include <boost/$1.hpp>
$0
endsnippet

snippet iu "" b
#include <boost/utility.hpp>
$0
endsnippet

snippet ip "" b
#include <boost/shared_ptr.hpp>
$0
endsnippet

snippet #if "" b
#include <boost/foreach.hpp>
$0
endsnippet

snippet iv "" b
#include <vector>
$0
endsnippet

snippet ii "" b
#include <iostream>
$0
endsnippet

snippet il "" b
#include <list>
$0
endsnippet

snippet ia "" b
#include <algorithm>
$0
endsnippet

snippet im "" b
#include <cmath>
$0
endsnippet

snippet #c "" b
#ifndef $1
# error "$1 is not defined.$2"
#endif
endsnippet

snippet #cd "" b
#ifndef $1
# define $1 $2
#endif
endsnippet

snippet ty "" b
typedef 
endsnippet

snippet t
template<$1> $0 
endsnippet

snippet ig "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$0

#endif

endsnippet

snippet fcl "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

class ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $0
};

#endif

snippet fclc "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

class ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $3($4);
    $0
};

#endif

endsnippet

snippet fclcd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

class ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $3($4);
    ~$3();
    $0
};

#endif

endsnippet

snippet fclcvd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

class ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $3($4);
    virtual ~$3();
    $0
};

#endif

endsnippet

snippet fclcvd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

class ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $3($4);
    virtual ~$3();
    $0
};

#endif

endsnippet

snippet fst "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

struct ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $0
};

#endif

snippet fstc "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

struct ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $3($4);
  $0
};

#endif

endsnippet

snippet fstcd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

struct ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $3($4);
  ~$3();
  $0
};

#endif

endsnippet

snippet fstcvd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

struct ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $3($4);
  virtual ~$3();
  $0
};

#endif

endsnippet

snippet fstcvd "" b
#ifndef ${1:`!p  
s = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', fn)
s = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s).upper()
snip.rv = re.sub('\.', '_', s)`}
#define $1

$2

struct ${3:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $3($4);
  virtual ~$3();
  $0
};

#endif

endsnippet

snippet r "" b
return 
endsnippet

snippet c
const 
endsnippet

snippet fo "" b
for ($1; $2; $3)
{
  $4
}
$0
endsnippet

snippet fi "" b
for (${1:int} i = 0; i < $2; ++i)
{
  $3
}
$0
endsnippet

snippet fj "" b
for (${1:int} j = 0; j < $2; ++j)
{
  $3
}
$0
endsnippet

snippet bfe "" b
BOOST_FOREACH (${1:Eg. int i}, ${2:Eg. m_vector})
{
  $3
}
$0
endsnippet

snippet ve ""
std::vector<$1>
endsnippet

snippet l ""
std::list<$1>
endsnippet

snippet u "" b
using $1;
$0
endsnippet

snippet un "" b
using namespace $1;
$0
endsnippet

snippet ns "" b
namespace $1
{
  $0
}
endsnippet

snippet ns2 "" b
namespace $1
{
  namespace $2
  {
    $0
  }
}
endsnippet

snippet ns3 "" b
namespace $1
{
  namespace $2
  {
    namespace $3
    {
      $0
    }
  }
}
endsnippet

snippet i "" b
#include "$1"
$0
endsnippet

snippet if "" b
if ($1)
{
  $2
}
$0
endsnippet

snippet I "" b
#include <$1>
$0
endsnippet

snippet d "" b
/**
 * @brief $1
 */
$0
endsnippet

snippet D "" b
/**
 * @brief $1
 *
 * $2
 */
$0
endsnippet

snippet g "" b
$1 & get$2()
{
  return $3;
}
endsnippet

snippet gc "" b
$1 & get$2()
{
  return $3;
}

const $1 & get$2() const
{
  return $3;
}
endsnippet 

snippet p "" w
boost::shared_ptr<$1>$0
endsnippet

snippet ms "" w
boost::make_shared<$1>($2)$0
endsnippet

snippet cl "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $0
};
endsnippet

snippet clc "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $1($2);
    $0
};
endsnippet

snippet cld "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    ~$1();
    $0
};
endsnippet

snippet clvd "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    virtual ~$1();
    $0
};
endsnippet

snippet clcd "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $1($2);
    ~$1();
    $0
};
endsnippet

snippet clcvd "" b
class ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  public:
    $1($2);
    virtual ~$1();
    $0
};
endsnippet

snippet st "" b
struct ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $0
};
endsnippet

snippet stc "" b
struct ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $1($2);
  $0
};
endsnippet

snippet std "" b
struct ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  ~$1();
  $0
};
endsnippet

snippet stvd "" b
struct ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  virtual ~$1();
  $0
};
endsnippet

snippet stcd "" b
struct ${1:`!p snip.rv=re.sub('\..*$', '', fn)`}
{
  $1($2);
  ~$1();
  $0
};
endsnippet

snippet stcvd "" b
struct ${1:`!p snip.rv=re.sub('\\..*$', '', fn)`}
{
  $1($2);
  virtual ~$1();
  $0
};
endsnippet

snippet s
`!p snip.rv=re.sub('\\..*$', '', fn)`::$0
endsnippet

snippet f "" b
$1 `!p snip.rv=re.sub('\\..*$', '', fn)`::$2($3)
{
  $4
}
$0
endsnippet
snippet v "" b
void `!p snip.rv=re.sub('\\..*$', '', fn)`::$1($2)
{
  $3
}
$0
endsnippet

snippet ct "" b
${1:`!p snip.rv=re.sub('\\..*$', '', fn)`}::$1($2)
{
  $0
}
endsnippet


snippet cti "" b
${1:`!p snip.rv=re.sub('\\..*$', '', fn)`}::$1($2)
  : $3
{
  $0
}
endsnippet

snippet dt "" b
${1:`!p snip.rv=re.sub('\\..*$', '', fn)`}::~$1($2)
{
  $0
}
endsnippet

snippet 79 "" b
///////////////////////////////////////////////////////////////////////////////
endsnippet
snippet //79
///////////////////////////////////////////////////////////////////////////////
endsnippet

snippet fe "" b
for (std::$1::iterator it = $2.begin();
  it != $2.end(); ++it)
{
  $0
}
endsnippet

snippet fec "" b
for (std::$1::const_iterator it = $2.begin();
  it != $2.end(); ++it)
{
  $0
}
endsnippet

snippet test "" b
#include <iostream>

using namespace std;
$1

int main(int argc, char ** argv)
{
  $0
  return 0;
}

endsnippet

snippet todo "" b
/** @todo $1 */
endsnippet
